"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./sanity.js":
/*!*******************!*\
  !*** ./sanity.js ***!
  \*******************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": function() { return /* binding */ config; },\n/* harmony export */   \"sanityClient\": function() { return /* binding */ sanityClient; },\n/* harmony export */   \"urlFor\": function() { return /* binding */ urlFor; },\n/* harmony export */   \"useCurrentUser\": function() { return /* binding */ useCurrentUser; }\n/* harmony export */ });\n/* harmony import */ var next_sanity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-sanity */ \"../node_modules/next-sanity/dist/next-sanity.esm.js\");\n\nvar config = {\n    /**\n   * Find your project ID and dataset in `sanity.json` in your studio project.\n   * These are considered “public”, but you can use environment variables\n   * if you want differ between local dev and production.\n   *\n   * https://nextjs.org/docs/basic-features/environment-variables\n   **/ dataset: \"production\" || 0,\n    projectId: \"vlft033y\",\n    apiVersion: '2021-10-21',\n    /**\n   * Set useCdn to `false` if your application require the freshest possible\n   * data always (potentially slightly slower and a bit more expensive).\n   * Authenticated request (like preview) will always bypass the CDN\n   **/ useCdn: \"development\" === 'production'\n};\nvar sanityClient = (0,next_sanity__WEBPACK_IMPORTED_MODULE_0__.createClient)(config);\n/**\n * Set up a helper function for generating Image URLs with only the asset reference data in your documents.\n * Read more: https://www.sanity.io/docs/image-url\n **/ var urlFor = function(source) {\n    return (0,next_sanity__WEBPACK_IMPORTED_MODULE_0__.createImageUrlBuilder)(config).image(source);\n};\n// Helper function for using the current logged in user account\nvar useCurrentUser = (0,next_sanity__WEBPACK_IMPORTED_MODULE_0__.createCurrentUserHook)(config);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYW5pdHkuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJb0I7QUFHYixHQUFLLENBQUNHLE1BQU0sR0FBRyxDQUFDO0lBQ3JCLEVBTUk7Ozs7OztJQUFBLEdBQ0pDLE9BQU8sRUFBRUMsWUFBc0MsSUFBSSxDQUFZO0lBQy9ERyxTQUFTLEVBQUVILFVBQXlDO0lBQ3BESyxVQUFVLEVBQUUsQ0FBWTtJQUN4QixFQUlJOzs7O0lBQUEsR0FDSkMsTUFBTSxFQXZCUixDQUFhLGlCQXVCc0IsQ0FBWTtBQUMvQyxDQUFDO0FBRU0sR0FBSyxDQUFDQyxZQUFZLEdBQUdWLHlEQUFZLENBQUNDLE1BQU07QUFFL0MsRUFHSTs7O0VBQUEsR0FDRyxHQUFLLENBQUNVLE1BQU0sR0FBRyxRQUFRLENBQVBDLE1BQU07SUFBS2QsTUFBTSxDQUFOQSxrRUFBcUIsQ0FBQ0csTUFBTSxFQUFFWSxLQUFLLENBQUNELE1BQU07O0FBRTVFLEVBQStEO0FBQ3hELEdBQUssQ0FBQ0UsY0FBYyxHQUFHZixrRUFBcUIsQ0FBQ0UsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zYW5pdHkuanM/ODVkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVJbWFnZVVybEJ1aWxkZXIsXG4gIGNyZWF0ZUN1cnJlbnRVc2VySG9vayxcbiAgY3JlYXRlQ2xpZW50LFxufSBmcm9tIFwibmV4dC1zYW5pdHlcIlxuXG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIC8qKlxuICAgKiBGaW5kIHlvdXIgcHJvamVjdCBJRCBhbmQgZGF0YXNldCBpbiBgc2FuaXR5Lmpzb25gIGluIHlvdXIgc3R1ZGlvIHByb2plY3QuXG4gICAqIFRoZXNlIGFyZSBjb25zaWRlcmVkIOKAnHB1YmxpY+KAnSwgYnV0IHlvdSBjYW4gdXNlIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgKiBpZiB5b3Ugd2FudCBkaWZmZXIgYmV0d2VlbiBsb2NhbCBkZXYgYW5kIHByb2R1Y3Rpb24uXG4gICAqXG4gICAqIGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2Jhc2ljLWZlYXR1cmVzL2Vudmlyb25tZW50LXZhcmlhYmxlc1xuICAgKiovXG4gIGRhdGFzZXQ6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NBTklUWV9EQVRBU0VUIHx8ICdwcm9kdWN0aW9uJyxcbiAgcHJvamVjdElkOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TQU5JVFlfUFJPSkVDVF9JRCxcbiAgYXBpVmVyc2lvbjogJzIwMjEtMTAtMjEnLCAvLyBMZWFybiBtb3JlOiBodHRwczovL3d3dy5zYW5pdHkuaW8vZG9jcy9hcGktdmVyc2lvbmluZ1xuICAvKipcbiAgICogU2V0IHVzZUNkbiB0byBgZmFsc2VgIGlmIHlvdXIgYXBwbGljYXRpb24gcmVxdWlyZSB0aGUgZnJlc2hlc3QgcG9zc2libGVcbiAgICogZGF0YSBhbHdheXMgKHBvdGVudGlhbGx5IHNsaWdodGx5IHNsb3dlciBhbmQgYSBiaXQgbW9yZSBleHBlbnNpdmUpLlxuICAgKiBBdXRoZW50aWNhdGVkIHJlcXVlc3QgKGxpa2UgcHJldmlldykgd2lsbCBhbHdheXMgYnlwYXNzIHRoZSBDRE5cbiAgICoqL1xuICB1c2VDZG46IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicsXG59XG5cbmV4cG9ydCBjb25zdCBzYW5pdHlDbGllbnQgPSBjcmVhdGVDbGllbnQoY29uZmlnKTtcblxuLyoqXG4gKiBTZXQgdXAgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdlbmVyYXRpbmcgSW1hZ2UgVVJMcyB3aXRoIG9ubHkgdGhlIGFzc2V0IHJlZmVyZW5jZSBkYXRhIGluIHlvdXIgZG9jdW1lbnRzLlxuICogUmVhZCBtb3JlOiBodHRwczovL3d3dy5zYW5pdHkuaW8vZG9jcy9pbWFnZS11cmxcbiAqKi9cbmV4cG9ydCBjb25zdCB1cmxGb3IgPSAoc291cmNlKSA9PiBjcmVhdGVJbWFnZVVybEJ1aWxkZXIoY29uZmlnKS5pbWFnZShzb3VyY2UpXG5cbi8vIEhlbHBlciBmdW5jdGlvbiBmb3IgdXNpbmcgdGhlIGN1cnJlbnQgbG9nZ2VkIGluIHVzZXIgYWNjb3VudFxuZXhwb3J0IGNvbnN0IHVzZUN1cnJlbnRVc2VyID0gY3JlYXRlQ3VycmVudFVzZXJIb29rKGNvbmZpZykiXSwibmFtZXMiOlsiY3JlYXRlSW1hZ2VVcmxCdWlsZGVyIiwiY3JlYXRlQ3VycmVudFVzZXJIb29rIiwiY3JlYXRlQ2xpZW50IiwiY29uZmlnIiwiZGF0YXNldCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TQU5JVFlfREFUQVNFVCIsInByb2plY3RJZCIsIk5FWFRfUFVCTElDX1NBTklUWV9QUk9KRUNUX0lEIiwiYXBpVmVyc2lvbiIsInVzZUNkbiIsInNhbml0eUNsaWVudCIsInVybEZvciIsInNvdXJjZSIsImltYWdlIiwidXNlQ3VycmVudFVzZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./sanity.js\n");

/***/ })

});